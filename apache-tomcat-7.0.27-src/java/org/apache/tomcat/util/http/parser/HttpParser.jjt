/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Parsing HTTP headers as per RFC2616 is not always as simple as it first
 * appears. For headers that only use tokens the simple approach will normally
 * be sufficient. However, for the other headers, while simple code meets 99.9%
 * of cases, there are often some edge cases that make things far more
 * complicated.
 *
 * The purpose of this parser is to let the parser worry about the edge cases.
 * It provides strict parsing of HTTP header values assuming that wrapped header
 * lines have already been unwrapped. (The Tomcat header processing code does
 * the unwrapping.)
 *
 * Provides parsing of the following HTTP header values as per RFC 2616:
 * - Content-Type
 *
 * Support for additional headers will be provided as required.
 */

/* Option Declaration */
options
{
    STATIC=false;
    NODE_PREFIX="Ast";
    MULTI=true;
    NODE_DEFAULT_VOID=true;
    JAVA_UNICODE_ESCAPE=false;
    UNICODE_INPUT=true;
    BUILD_NODE_FILES=true;
}


/* Parser Declaration */
PARSER_BEGIN( HttpParser )
package org.apache.tomcat.util.http.parser;
public class HttpParser
{
}
PARSER_END( HttpParser )


/*
 * Content-Type
 */
AstMediaType MediaType() #MediaType : {}
{
    Type() <FORWARD_SLASH> SubType() ( <SEMI_COLON> Parameter())* <EOF> {
        return jjtThis;
    }
}

void Type() #Type : { Token t = null; }
{
    t=<HTTP_TOKEN> { jjtThis.jjtSetValue(t.image.trim()); }
}

void SubType() #SubType :{ Token t = null; }
{
    t=<HTTP_TOKEN> { jjtThis.jjtSetValue(t.image.trim()); }
}

void Parameter() #Parameter : {}
{
    Attribute() <EQUALS> Value()
}

void Attribute() # Attribute : { Token t = null; }
{
    t=<HTTP_TOKEN> { jjtThis.jjtSetValue(t.image.trim()); }
}

void Value() #Value : { Token t = null; }
{
    t=<HTTP_TOKEN> { jjtThis.jjtSetValue(t.image.trim()); } | t=<QUOTED_STRING> { jjtThis.jjtSetValue(t.image.trim()); }
}


<DEFAULT> TOKEN:
{
  < SEMI_COLON :    ";" >
| < EQUALS :        "=" >
| < FORWARD_SLASH : "/" >
| < SP :            " " >
| < HT :            "\t" >
| < LWS :           (<HT> | <SP>)+ >
| < HTTP_TOKEN :    (<LWS>)? (<HTTP_TOKEN_CHAR>)+ (<LWS>)? >
| < QUOTED_STRING : (<LWS>)? <START_QUOTE> <QUOTED_TEXT> <END_QUOTE> (<LWS>)? >
| < START_QUOTE :   "\"" > : IN_QUOTED_TEXT
| < #HTTP_TOKEN_CHAR:
     [
     "\u0021",
     "\u0023"-"\u0027",
     "\u002a"-"\u002b",
     "\u002d"-"\u002e",
     "\u0030"-"\u0039",
     "\u0041"-"\u005a",
     "\u005e"-"\u007a",
     "\u007c",
     "\u007e"
     ]
  >
}

<IN_QUOTED_TEXT> TOKEN :
{
  < #QUOTED_TEXT :   (<QUOTED_TEXT_CHAR> | ("\\" <CHAR> ))* >
| < #END_QUOTE :     "\"" >
| < #QUOTED_TEXT_CHAR:
     [
     "\u0009",
     "\u0020"-"\u0021",
     "\u0023"-"\u005b",
     "\u005d"-"\u00ff"
     ]
  >
| < #CHAR:
     [
     "\u0000"-"\u007f"
     ]
  >
}